$date
	Sat Dec  3 20:22:25 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module Processor_Top_tb $end
$scope module uut $end
$var wire 1 ! clk $end
$var wire 1 " rst_n $end
$var wire 1 # zero_out $end
$var wire 32 $ sign_ext_out [31:0] $end
$var wire 32 % read_data2 [31:0] $end
$var wire 32 & read_data1 [31:0] $end
$var wire 32 ' out_address [31:0] $end
$var wire 32 ( jump_address [31:0] $end
$var wire 32 ) instrn [31:0] $end
$var wire 1 * final_write_en $end
$var wire 32 + datamem_read_data [31:0] $end
$var wire 1 , ctrl_write_en $end
$var wire 5 - ctrl_write_addr [4:0] $end
$var wire 32 . ctrl_regwrite_data [31:0] $end
$var wire 32 / ctrl_in_address [31:0] $end
$var wire 1 0 ctrl_datamem_write_en $end
$var wire 32 1 ctrl_aluin2 [31:0] $end
$var wire 32 2 branch_address [31:0] $end
$var wire 32 3 branch_addr_offset [31:0] $end
$var wire 32 4 alu_result [31:0] $end
$var wire 32 5 address_plus_4 [31:0] $end
$var wire 32 6 addr_incr [31:0] $end
$scope module adder_branch_addr $end
$var wire 32 7 out [31:0] $end
$var wire 32 8 in2 [31:0] $end
$var wire 32 9 in1 [31:0] $end
$upscope $end
$scope module adder_next_addr $end
$var wire 32 : in2 [31:0] $end
$var wire 32 ; out [31:0] $end
$var wire 32 < in1 [31:0] $end
$upscope $end
$scope module alu $end
$var wire 6 = func_field [5:0] $end
$var wire 6 > opcode [5:0] $end
$var wire 1 # zero $end
$var wire 32 ? result [31:0] $end
$var wire 3 @ alu_control [2:0] $end
$var wire 32 A B [31:0] $end
$var wire 32 B A [31:0] $end
$scope module alu_core_inst $end
$var wire 1 # zero $end
$var wire 3 C alu_control [2:0] $end
$var wire 32 D B [31:0] $end
$var wire 32 E A [31:0] $end
$var reg 32 F result [31:0] $end
$upscope $end
$scope module alu_ctrlr_inst $end
$var wire 6 G func_field [5:0] $end
$var wire 6 H opcode [5:0] $end
$var reg 3 I alu_control [2:0] $end
$var reg 3 J func_code [2:0] $end
$upscope $end
$upscope $end
$scope module ctrl_logic $end
$var wire 32 K address_plus_4 [31:0] $end
$var wire 32 L alu_result [31:0] $end
$var wire 32 M branch_address [31:0] $end
$var wire 1 , ctrl_write_en $end
$var wire 6 N instrn_opcode [5:0] $end
$var wire 32 O jump_address [31:0] $end
$var wire 1 # zero_out $end
$var wire 32 P sign_ext_out [31:0] $end
$var wire 32 Q read_data2 [31:0] $end
$var wire 32 R instrn [31:0] $end
$var wire 32 S datamem_read_data [31:0] $end
$var wire 5 T ctrl_write_addr [4:0] $end
$var wire 32 U ctrl_regwrite_data [31:0] $end
$var wire 32 V ctrl_in_address [31:0] $end
$var wire 1 0 ctrl_datamem_write_en $end
$var wire 32 W ctrl_aluin2 [31:0] $end
$upscope $end
$scope module data_mem $end
$var wire 32 X address [31:0] $end
$var wire 1 ! clk $end
$var wire 1 0 write_en $end
$var wire 32 Y write_data [31:0] $end
$var wire 32 Z read_data [31:0] $end
$upscope $end
$scope module instr_mem $end
$var wire 32 [ instrn_address [31:0] $end
$var wire 32 \ instrn [31:0] $end
$upscope $end
$scope module prg_cntr $end
$var wire 1 ! clk $end
$var wire 32 ] in_address [31:0] $end
$var wire 1 " rst_n $end
$var reg 32 ^ out_address [31:0] $end
$upscope $end
$scope module regfile $end
$var wire 1 ! clk $end
$var wire 5 _ read_addr1 [4:0] $end
$var wire 5 ` read_addr2 [4:0] $end
$var wire 32 a read_data1 [31:0] $end
$var wire 32 b read_data2 [31:0] $end
$var wire 1 " rst_n $end
$var wire 5 c write_addr [4:0] $end
$var wire 32 d write_data [31:0] $end
$var wire 1 * write_en $end
$upscope $end
$scope module shifter $end
$var wire 32 e outdata [31:0] $end
$var wire 2 f shift_amt [1:0] $end
$var wire 1 g shift_left $end
$var wire 32 h indata [31:0] $end
$upscope $end
$scope module sign_ext $end
$var wire 16 i bits16_in [15:0] $end
$var wire 32 j bits32_out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b101100000100000 j
b101100000100000 i
b101100000100000 h
1g
b10 f
b10110000010000000 e
b110011 d
b1011 c
b100010 b
b10001 a
b1010 `
b1001 _
b0 ^
b0 ]
b1001010100101100000100000 \
b0 [
bx Z
b100010 Y
b110011 X
b100010 W
b0 V
b110011 U
b1011 T
bx S
b1001010100101100000100000 R
b100010 Q
b101100000100000 P
b100101010010110000010000000 O
b0 N
b10110000010000000 M
b110011 L
b0 K
b0 J
b0 I
b0 H
b100000 G
b110011 F
b10001 E
b100010 D
b0 C
b10001 B
b100010 A
b0 @
b110011 ?
b0 >
b100000 =
b0 <
b0 ;
b0 :
b0 9
b10110000010000000 8
b10110000010000000 7
b0 6
b0 5
b110011 4
b10110000010000000 3
b10110000010000000 2
b100010 1
00
b0 /
b110011 .
b1011 -
1,
bx +
0*
b1001010100101100000100000 )
b100101010010110000010000000 (
b0 '
b10001 &
b100010 %
b101100000100000 $
0#
0"
1!
$end
#5
0!
#10
1!
#15
0!
#20
1!
#25
0!
#30
b100 /
b100 V
b100 ]
b10110000010000100 2
b10110000010000100 7
b10110000010000100 M
b100 5
b100 9
b100 ;
b100 K
b100 6
b100 :
1*
1!
1"
#35
0!
#40
b10101 4
b10101 ?
b10101 F
b10101 L
b10101 X
b100 1
b100 A
b100 D
b100 W
b1010 -
b1010 T
b1010 c
bx .
bx U
bx d
b1000 /
b1000 V
b1000 ]
b100 =
b100 G
b10000 3
b10000 8
b10000 e
b100 $
b100 P
b100 h
b100 j
b100 i
b100101010000000000000010000 (
b100101010000000000000010000 O
b100011 N
b100011 >
b100011 H
b10001101001010100000000000000100 )
b10001101001010100000000000000100 R
b10001101001010100000000000000100 \
b11000 2
b11000 7
b11000 M
b1000 5
b1000 9
b1000 ;
b1000 K
b100 '
b100 <
b100 [
b100 ^
1!
#45
0!
#50
0*
1#
b10000000000000000 +
b10000000000000000 S
b10000000000000000 Z
b0 4
b0 ?
b0 F
b0 L
b0 X
b10001 1
b10001 A
b10001 D
b10001 W
b1001 -
b1001 T
b1001 c
0,
b0 .
b0 U
b0 d
b1 @
b1 C
b1 I
b10000 /
b10000 V
b10000 ]
b1 =
b1 G
b100 3
b100 8
b100 e
b1 $
b1 P
b1 h
b1 j
b1 i
b1001 `
b100101001000000000000000100 (
b100101001000000000000000100 O
b100 N
b100 >
b100 H
b10001 %
b10001 Q
b10001 Y
b10001 b
b10001001010010000000000000001 )
b10001001010010000000000000001 R
b10001001010010000000000000001 \
b10000 2
b10000 7
b10000 M
b1100 5
b1100 9
b1100 ;
b1100 K
b1000 '
b1000 <
b1000 [
b1000 ^
1!
#55
0!
#60
bx11xx11 .
bx11xx11 U
bx11xx11 d
1*
b110011 1
b110011 A
b110011 D
b110011 W
0#
bx +
bx S
bx Z
bx11xx11 4
bx11xx11 ?
bx11xx11 F
bx11xx11 L
bx11xx11 X
1,
b1100 -
b1100 T
b1100 c
b11 @
b11 C
b11 I
b11 J
b100101 =
b100101 G
b11000000010010100 3
b11000000010010100 8
b11000000010010100 e
b110000000100101 $
b110000000100101 P
b110000000100101 h
b110000000100101 j
b110000000100101 i
b110011 %
b110011 Q
b110011 Y
b110011 b
b1011 `
bx &
bx B
bx E
bx a
b1010 _
b101001011011000000010010100 (
b101001011011000000010010100 O
b0 N
b0 >
b0 H
b10100 /
b10100 V
b10100 ]
b1010010110110000000100101 )
b1010010110110000000100101 R
b1010010110110000000100101 \
b11000000010101000 2
b11000000010101000 7
b11000000010101000 M
b10100 5
b10100 9
b10100 ;
b10100 K
b10000 '
b10000 <
b10000 [
b10000 ^
1!
#65
0!
#70
b10101 .
b10101 U
b10101 d
0*
b100 1
b100 A
b100 D
b100 W
b10101 4
b10101 ?
b10101 F
b10101 L
b10101 X
0,
b1010 -
b1010 T
b1010 c
b0 @
b0 C
b0 I
b0 J
b11000 /
b11000 V
b11000 ]
b100 =
b100 G
b10000 3
b10000 8
b10000 e
b100 $
b100 P
b100 h
b100 j
b100 i
bx %
bx Q
bx Y
bx b
b1010 `
b10001 &
b10001 B
b10001 E
b10001 a
b1001 _
b100101010000000000000010000 (
b100101010000000000000010000 O
10
b101011 N
b101011 >
b101011 H
b10101101001010100000000000000100 )
b10101101001010100000000000000100 R
b10101101001010100000000000000100 \
b101000 2
b101000 7
b101000 M
b11000 5
b11000 9
b11000 ;
b11000 K
b10100 '
b10100 <
b10100 [
b10100 ^
1!
#75
0!
#80
1#
b0 .
b0 U
b0 d
b0 1
b0 A
b0 D
b0 W
b0 -
b0 T
b0 c
b10000000000000000 +
b10000000000000000 S
b10000000000000000 Z
b0 4
b0 ?
b0 F
b0 L
b0 X
b0 /
b0 V
b0 ]
b0 =
b0 G
b0 3
b0 8
b0 e
b0 $
b0 P
b0 h
b0 j
b0 i
b0 %
b0 Q
b0 Y
b0 b
b0 `
00
b10 N
b10 >
b10 H
b0 &
b0 B
b0 E
b0 a
b0 _
b0 (
b0 O
b1000000000000000000000000000 )
b1000000000000000000000000000 R
b1000000000000000000000000000 \
b11100 2
b11100 7
b11100 M
b11100 5
b11100 9
b11100 ;
b11100 K
b11000 '
b11000 <
b11000 [
b11000 ^
1!
#85
0!
#90
1*
bx .
bx U
bx d
b100 /
b100 V
b100 ]
bx 1
bx A
bx D
bx W
1,
b1011 -
b1011 T
b1011 c
x#
bx +
bx S
bx Z
bx 4
bx ?
bx F
bx L
bx X
b100000 =
b100000 G
b10110000010000000 3
b10110000010000000 8
b10110000010000000 e
b101100000100000 $
b101100000100000 P
b101100000100000 h
b101100000100000 j
b101100000100000 i
bx %
bx Q
bx Y
bx b
b1010 `
b0 N
b0 >
b0 H
b10001 &
b10001 B
b10001 E
b10001 a
b1001 _
b100101010010110000010000000 (
b100101010010110000010000000 O
b1001010100101100000100000 )
b1001010100101100000100000 R
b1001010100101100000100000 \
b10110000010000100 2
b10110000010000100 7
b10110000010000100 M
b100 5
b100 9
b100 ;
b100 K
b0 '
b0 <
b0 [
b0 ^
1!
#95
0!
#100
0#
b10101 4
b10101 ?
b10101 F
b10101 L
b10101 X
b100 1
b100 A
b100 D
b100 W
b1010 -
b1010 T
b1010 c
b1000 /
b1000 V
b1000 ]
b100 =
b100 G
b10000 3
b10000 8
b10000 e
b100 $
b100 P
b100 h
b100 j
b100 i
b100101010000000000000010000 (
b100101010000000000000010000 O
b100011 N
b100011 >
b100011 H
b10001101001010100000000000000100 )
b10001101001010100000000000000100 R
b10001101001010100000000000000100 \
b11000 2
b11000 7
b11000 M
b1000 5
b1000 9
b1000 ;
b1000 K
b100 '
b100 <
b100 [
b100 ^
1!
