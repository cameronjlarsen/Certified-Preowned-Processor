$date
	Sat Dec  3 00:51:55 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module Processor_Top_tb $end
$scope module uut $end
$var wire 1 ! clk $end
$var wire 32 " ctrl_in_address [31:0] $end
$var wire 1 # rst_n $end
$var wire 1 $ zero_out $end
$var wire 32 % sign_ext_out [31:0] $end
$var wire 32 & read_data2 [31:0] $end
$var wire 32 ' read_data1 [31:0] $end
$var wire 32 ( out_address [31:0] $end
$var wire 32 ) jump_address [31:0] $end
$var wire 32 * instrn [31:0] $end
$var wire 1 + final_write_en $end
$var wire 32 , datamem_read_data [31:0] $end
$var wire 1 - ctrl_write_en $end
$var wire 5 . ctrl_write_addr [4:0] $end
$var wire 32 / ctrl_regwrite_data [31:0] $end
$var wire 1 0 ctrl_datamem_write_en $end
$var wire 32 1 ctrl_aluin2 [31:0] $end
$var wire 32 2 branch_address [31:0] $end
$var wire 32 3 branch_addr_offset [31:0] $end
$var wire 32 4 alu_result [31:0] $end
$var wire 32 5 address_plus_4 [31:0] $end
$var wire 32 6 addr_incr [31:0] $end
$scope module adder_branch_addr $end
$var wire 32 7 out [31:0] $end
$var wire 32 8 in2 [31:0] $end
$var wire 32 9 in1 [31:0] $end
$upscope $end
$scope module adder_next_addr $end
$var wire 32 : in2 [31:0] $end
$var wire 32 ; out [31:0] $end
$var wire 32 < in1 [31:0] $end
$upscope $end
$scope module alu $end
$var wire 6 = func_field [5:0] $end
$var wire 6 > opcode [5:0] $end
$var wire 1 $ zero $end
$var wire 32 ? result [31:0] $end
$var wire 3 @ alu_control [2:0] $end
$var wire 32 A B [31:0] $end
$var wire 32 B A [31:0] $end
$scope module alu_core_inst $end
$var wire 1 $ zero $end
$var wire 3 C alu_control [2:0] $end
$var wire 32 D B [31:0] $end
$var wire 32 E A [31:0] $end
$var reg 32 F result [31:0] $end
$upscope $end
$scope module alu_ctrlr_inst $end
$var wire 6 G func_field [5:0] $end
$var wire 6 H opcode [5:0] $end
$var reg 3 I alu_control [2:0] $end
$var reg 3 J func_code [2:0] $end
$upscope $end
$upscope $end
$scope module ctrl_logic $end
$var wire 32 K address_plus_4 [31:0] $end
$var wire 32 L alu_result [31:0] $end
$var wire 32 M branch_address [31:0] $end
$var wire 32 N ctrl_in_address [31:0] $end
$var wire 1 - ctrl_write_en $end
$var wire 6 O instrn_opcode [5:0] $end
$var wire 32 P jump_address [31:0] $end
$var wire 1 $ zero_out $end
$var wire 32 Q sign_ext_out [31:0] $end
$var wire 32 R read_data2 [31:0] $end
$var wire 32 S instrn [31:0] $end
$var wire 32 T datamem_read_data [31:0] $end
$var wire 5 U ctrl_write_addr [4:0] $end
$var wire 32 V ctrl_regwrite_data [31:0] $end
$var wire 1 0 ctrl_datamem_write_en $end
$var wire 32 W ctrl_aluin2 [31:0] $end
$upscope $end
$scope module data_mem $end
$var wire 32 X address [31:0] $end
$var wire 1 ! clk $end
$var wire 1 0 write_en $end
$var wire 32 Y write_data [31:0] $end
$var wire 32 Z read_data [31:0] $end
$upscope $end
$scope module instr_mem $end
$var wire 32 [ instrn_address [31:0] $end
$var wire 32 \ instrn [31:0] $end
$upscope $end
$scope module prg_cntr $end
$var wire 1 ! clk $end
$var wire 32 ] in_address [31:0] $end
$var wire 1 # rst_n $end
$var reg 32 ^ out_address [31:0] $end
$upscope $end
$scope module regfile $end
$var wire 1 ! clk $end
$var wire 5 _ read_addr1 [4:0] $end
$var wire 5 ` read_addr2 [4:0] $end
$var wire 32 a read_data1 [31:0] $end
$var wire 32 b read_data2 [31:0] $end
$var wire 1 # rst_n $end
$var wire 5 c write_addr [4:0] $end
$var wire 32 d write_data [31:0] $end
$var wire 1 + write_en $end
$upscope $end
$scope module shifter $end
$var wire 32 e outdata [31:0] $end
$var wire 2 f shift_amt [1:0] $end
$var wire 1 g shift_left $end
$var wire 32 h indata [31:0] $end
$upscope $end
$scope module sign_ext $end
$var wire 16 i bits16_in [15:0] $end
$var wire 32 j bits32_out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b101100000100000 j
b101100000100000 i
b101100000100000 h
1g
b10 f
b10110000010000000 e
b10001 d
b1011 c
b10001 b
b0 a
b1010 `
b1001 _
b0 ^
b0 ]
b1001010100101100000100000 \
b0 [
bx Z
b10001 Y
b10001 X
b10001 W
b10001 V
b1011 U
bx T
b1001010100101100000100000 S
b10001 R
b101100000100000 Q
b100101010010110000010000000 P
b0 O
b0 N
b10110000010000000 M
b10001 L
b0 K
b0 J
b0 I
b0 H
b100000 G
b10001 F
b0 E
b10001 D
b0 C
b0 B
b10001 A
b0 @
b10001 ?
b0 >
b100000 =
b0 <
b0 ;
b0 :
b0 9
b10110000010000000 8
b10110000010000000 7
b0 6
b0 5
b10001 4
b10110000010000000 3
b10110000010000000 2
b10001 1
00
b10001 /
b1011 .
1-
bx ,
0+
b1001010100101100000100000 *
b100101010010110000010000000 )
b0 (
b0 '
b10001 &
b101100000100000 %
0$
0#
b0 "
1!
$end
#5
0!
#10
1!
#15
0!
#20
1!
#25
0!
#30
b100 "
b100 N
b100 ]
b10110000010000100 2
b10110000010000100 7
b10110000010000100 M
b100 5
b100 9
b100 ;
b100 K
b100 6
b100 :
1+
1!
1#
#35
0!
#40
b110000000000000010 ,
b110000000000000010 T
b110000000000000010 Z
b100 4
b100 ?
b100 F
b100 L
b100 X
b100 1
b100 A
b100 D
b100 W
b1010 .
b1010 U
b1010 c
b110000000000000010 /
b110000000000000010 V
b110000000000000010 d
b100 =
b100 G
b10000 3
b10000 8
b10000 e
b100 %
b100 Q
b100 h
b100 j
b100 i
b100101010000000000000010000 )
b100101010000000000000010000 P
b100011 O
b100011 >
b100011 H
b1000 "
b1000 N
b1000 ]
b10001101001010100000000000000100 *
b10001101001010100000000000000100 S
b10001101001010100000000000000100 \
b11000 2
b11000 7
b11000 M
b1000 5
b1000 9
b1000 ;
b1000 K
b100 (
b100 <
b100 [
b100 ^
1!
#45
0!
#50
0+
1$
b10000000000000000 ,
b10000000000000000 T
b10000000000000000 Z
b0 4
b0 ?
b0 F
b0 L
b0 X
b0 1
b0 A
b0 D
b0 W
b1001 .
b1001 U
b1001 c
0-
b0 /
b0 V
b0 d
b1 @
b1 C
b1 I
b1 =
b1 G
b100 3
b100 8
b100 e
b1 %
b1 Q
b1 h
b1 j
b1 i
b1001 `
b100101001000000000000000100 )
b100101001000000000000000100 P
b100 O
b100 >
b100 H
b0xxx00 "
b0xxx00 N
b0xxx00 ]
b0 &
b0 R
b0 Y
b0 b
b10001001010010000000000000001 *
b10001001010010000000000000001 S
b10001001010010000000000000001 \
b10000 2
b10000 7
b10000 M
b1100 5
b1100 9
b1100 ;
b1100 K
b1000 (
b1000 <
b1000 [
b1000 ^
1!
#55
0!
#60
x+
bx 1
bx A
bx D
bx W
x-
bx .
bx U
bx c
bx /
bx V
bx d
b0 @
b0 C
b0 I
x$
bx ,
bx T
bx Z
bx 4
bx ?
bx F
bx L
bx X
bx =
bx G
bx00 3
bx00 8
bx00 e
bx %
bx Q
bx h
bx j
bx i
bx &
bx R
bx Y
bx b
bx `
x0
bx O
bx >
bx H
bx '
bx B
bx E
bx a
bx _
bx "
bx N
bx ]
bx00 )
bx00 P
bx *
bx S
bx \
bx 2
bx 7
bx M
bx 5
bx 9
bx ;
bx K
b0xxx00 (
b0xxx00 <
b0xxx00 [
b0xxx00 ^
1!
#65
0!
#70
bx (
bx <
bx [
bx ^
1!
#75
0!
#80
1!
#85
0!
#90
1!
#95
0!
#100
1!
